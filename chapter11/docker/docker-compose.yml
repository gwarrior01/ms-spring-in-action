version: '3.8'
services:
  database:
    image: postgres:16.1
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: tech
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/1-init.sql
      - ./data.sql:/docker-entrypoint-initdb.d/2-data.sql
    networks:
      backend:
        aliases:
          - "database"

  kafka:
    image: confluentinc/cp-kafka:7.9.1
    restart: "no"
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_NODE_ID: 1
      CLUSTER_ID: enikrOwZTYSqcPfSS47W_Q
      KAFKA_PROCESS_ROLES: controller,broker
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://0.0.0.0:9092,CONTROLLER://kafka:9093
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 10s
      timeout: 5s
      start_period: 30s
      retries: 5

  kafkaui:
    image: provectuslabs/kafka-ui:v0.7.0
    restart: "no"
    ports:
      - "8989:8080"
    environment:
      DYNAMIC_CONFIG_ENABLED: "true"
      KAFKA_CLUSTERS_0_NAME: enikrOwZTYSqcPfSS47W_Q
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
    healthcheck:
      test: wget --no-verbose --tries=1 --spider http://localhost:8080/actuator/health || exit -1
      interval: 10s
      timeout: 5s
      start_period: 60s
      retries: 5

  redis:
    image: redis:8.0.2
    restart: "no"
    ports:
      - "6379:6379"
    healthcheck:
      test: redis-cli ping
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

  jaeger:
    image: jaegertracing/all-in-one:1.69.0
    ports:
      - "16686:16686"   # UI
      - "14250:14250"   # gRPC (used by OTEL collector)
    networks:
      backend:
        aliases:
          - "jaeger"

  otel-collector:
    image: otel/opentelemetry-collector:0.127.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ./config/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "1888:1888"   # pprof extension
      - "8888:8888"   # Prometheus metrics exposed by the collector
      - "8889:8889"   # Prometheus exporter metrics
      - "13133:13133" # health_check extension
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP http receiver
      - "55679:55679" # zpages extension
    depends_on:
      - jaeger
    networks:
      - backend

  prometheus:
    image: prom/prometheus:latest
    restart: always
    volumes:
      - ./config/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - backend

  logstash:
    image: logstash:9.0.2
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5050:5000"
    networks:
      - backend

  elasticsearch:
    image: elasticsearch:9.0.2
    ports:
      - "9201:9200"
    environment:
      xpack.security.enabled: "false"
      bootstrap.memory_lock: "true"
      discovery.type: "single-node"
    healthcheck:
      test: curl -u --fail -s http://localhost:9200 || exit 1
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5
    ulimits:
      memlock:
        soft: -1
        hard: -1
    networks:
      - backend

  kibana:
    image: kibana:9.0.2
    container_name: kibana
    environment:
      ELASTICSEARCH_HOSTS: "http://elasticsearch:9200"
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      backend:
        aliases:
          - "kibana"

networks:
  backend:
    driver: bridge